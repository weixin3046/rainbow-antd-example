{
  "address": "0xCaFCA685891A2CeFbf78F89BeA3EaA9B096d377B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Confirmation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Execution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "ExecutionFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "RequirementChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Revocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Submission",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_OWNER_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "name": "changeRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "confirmTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "confirmations",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "discardTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_confirmations",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_transactionIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTransactions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "description",
              "type": "bytes32"
            },
            {
              "internalType": "uint48",
              "name": "createTime",
              "type": "uint48"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "submitter",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct MultiSigBank.Transaction[]",
          "name": "_transactions",
          "type": "tuple[]"
        },
        {
          "internalType": "bool[]",
          "name": "_isAccountConfirms",
          "type": "bool[]"
        },
        {
          "internalType": "bool[]",
          "name": "_confirms",
          "type": "bool[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "isConfirmed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "replaceOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "revokeConfirmation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "description",
          "type": "bytes32"
        }
      ],
      "name": "submitTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "description",
          "type": "bytes32"
        },
        {
          "internalType": "uint48",
          "name": "createTime",
          "type": "uint48"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa7354e8b650dd0ad17a22b6fc7871806e6207754597c53277d0a6778353d504a",
  "receipt": {
    "to": null,
    "from": "0xbBBC9F5dBeeB6D61793B1aB00B89032fCFcE193c",
    "contractAddress": "0xCaFCA685891A2CeFbf78F89BeA3EaA9B096d377B",
    "transactionIndex": 15,
    "gasUsed": "2242318",
    "logsBloom": "0x
    "blockHash": "0x1a8d4209ce5c4bf28bb4815df8571d26d4cfcb5e3eb43a79ddb98a4ba854bdaa",
    "transactionHash": "0xa7354e8b650dd0ad17a22b6fc7871806e6207754597c53277d0a6778353d504a",
    "logs": [],
    "blockNumber": 40341605,
    "cumulativeGasUsed": "5951054",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x4CD9C1a7898e03B9F202b534f0680089d8eb2694",
      "0x83307591655655F02773a6C0c4584FA6002171E2",
      "0x83c91a3463419bF6aaF34b6863b0c7a3E008D9f8"
    ],
    2
  ],
  "numDeployments": 1,
  "solcInputHash": "2bf86e5097607a35c9cb9addbc4d9ecc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"discardTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTransactions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"description\",\"type\":\"bytes32\"},{\"internalType\":\"uint48\",\"name\":\"createTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct MultiSigBank.Transaction[]\",\"name\":\"_transactions\",\"type\":\"tuple[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isAccountConfirms\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"_confirms\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"description\",\"type\":\"bytes32\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"description\",\"type\":\"bytes32\"},{\"internalType\":\"uint48\",\"name\":\"createTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addOwner(address)\":{\"details\":\"Allows to add a new owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of new owner.\"}},\"changeRequirement(uint256)\":{\"details\":\"Allows to change the number of required confirmations. Transaction has to be sent by wallet.\",\"params\":{\"_required\":\"Number of required confirmations.\"}},\"confirmTransaction(uint256)\":{\"details\":\"Allows an owner to confirm a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"constructor\":{\"details\":\"Contract constructor sets initial owners and required number of confirmations.\",\"params\":{\"_owners\":\"List of initial owners.\",\"_required\":\"Number of required confirmations.\"}},\"executeTransaction(uint256)\":{\"details\":\"Allows anyone to execute a confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"getConfirmationCount(uint256)\":{\"details\":\"Returns number of confirmations of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"returns\":{\"count\":\"of confirmations.\"}},\"getConfirmations(uint256)\":{\"details\":\"Returns array with owner addresses, which confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"returns\":{\"_confirmations\":\"array of owner addresses.\"}},\"getOwners()\":{\"details\":\"Returns list of owners.\",\"returns\":{\"_0\":\"List of owner addresses.\"}},\"getTransactionCount(bool,bool)\":{\"details\":\"Returns total number of transactions after filers are applied.\",\"params\":{\"executed\":\"Include executed transactions.\",\"pending\":\"Include pending transactions.\"},\"returns\":{\"count\":\"Total number of transactions after filters are applied.\"}},\"getTransactionIds(uint256,uint256,bool,bool)\":{\"details\":\"Returns list of transaction IDs in defined range.\",\"params\":{\"executed\":\"Include executed transactions.\",\"from\":\"Index start position of transaction array.\",\"pending\":\"Include pending transactions.\",\"to\":\"Index end position of transaction array.\"},\"returns\":{\"_transactionIds\":\"array of transaction IDs.\"}},\"isConfirmed(uint256)\":{\"details\":\"Returns the confirmation status of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"returns\":{\"_0\":\"Confirmation status.\"}},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"replaceOwner(address,address)\":{\"details\":\"Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of new owner.\"}},\"revokeConfirmation(uint256)\":{\"details\":\"Allows an owner to revoke a confirmation for a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"submitTransaction(address,uint256,bytes,bytes32)\":{\"details\":\"Allows an owner to submit and confirm a transaction.\",\"params\":{\"data\":\"Transaction data payload.\",\"description\":\"A brief description of this transaction, less than 32 bytes.\",\"destination\":\"Transaction target address.\",\"value\":\"Transaction ether value.\"},\"returns\":{\"transactionId\":\"transaction ID.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTransactions(uint256,address)\":{\"notice\":\"\\u83b7\\u53d6\\u6700\\u8fd1\\u7684\\u63d0\\u6848\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/MultiSigBank.sol\":\"MultiSigBank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/utils/MultiSigBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract MultiSigBank {\\n\\n    uint constant public MAX_OWNER_COUNT = 50;\\n\\n    event Confirmation(address indexed sender, uint indexed transactionId);\\n    event Revocation(address indexed sender, uint indexed transactionId);\\n    event Submission(uint indexed transactionId);\\n    event Execution(uint indexed transactionId);\\n    event ExecutionFailure(uint indexed transactionId);\\n    event Deposit(address indexed sender, uint value);\\n    event OwnerAddition(address indexed owner);\\n    event OwnerRemoval(address indexed owner);\\n    event RequirementChange(uint required);\\n\\n    mapping(uint => Transaction) public transactions;\\n    mapping(uint => mapping(address => bool)) public confirmations;\\n    mapping(address => bool) public isOwner;\\n    address[] public owners;\\n    uint public required;\\n    uint public transactionCount;\\n\\n    struct Transaction {\\n        bytes32 description;    // \\u63cf\\u8ff0\\n        uint48 createTime;     // \\u63d0\\u51fa\\u65f6\\u95f4\\n        address destination;\\n        uint value;\\n        bytes data;\\n        address submitter;      // \\u63d0\\u4ea4\\u4eba\\uff0c0\\u4ee3\\u8868\\u8bae\\u6848\\u5df2\\u5e9f\\u5f03\\n        bool executed;\\n    }\\n\\n    modifier onlyWallet() {\\n        require(msg.sender == address(this), \\\"onlyWallet\\\");\\n        _;\\n    }\\n\\n    modifier ownerDoesNotExist(address owner) {\\n        require(!isOwner[owner], \\\"ownerDoesNotExist\\\");\\n        _;\\n    }\\n\\n    modifier ownerExists(address owner) {\\n        require(isOwner[owner], \\\"ownerExists\\\");\\n        _;\\n    }\\n\\n    modifier transactionExists(uint transactionId) {\\n        require(transactions[transactionId].destination != address(0), \\\"transactionExists\\\");\\n        _;\\n    }\\n\\n    modifier confirmed(uint transactionId, address owner) {\\n        require(confirmations[transactionId][owner], \\\"confirmed\\\");\\n        _;\\n    }\\n\\n    modifier notConfirmed(uint transactionId, address owner) {\\n        require(!confirmations[transactionId][owner], \\\"notConfirmed\\\");\\n        _;\\n    }\\n\\n    modifier notExecuted(uint transactionId) {\\n        require(!transactions[transactionId].executed, \\\"notExecuted\\\");\\n        _;\\n    }\\n\\n    modifier notDiscarded(uint transactionId) {\\n        require(transactions[transactionId].submitter != address(0), \\\"discarded\\\");\\n        _;\\n    }\\n\\n    modifier notNull(address _address) {\\n        require(_address != address(0), \\\"notNull\\\");\\n        _;\\n    }\\n\\n    modifier validRequirement(uint ownerCount, uint _required) {\\n        require(\\n            ownerCount <= MAX_OWNER_COUNT &&\\n            _required <= ownerCount &&\\n            _required > 0 &&\\n            ownerCount > 0, \\\"validRequirement\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Fallback function allows to deposit ether.\\n    receive() external payable {\\n        if (msg.value > 0)\\n            emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    /*\\n     * Public functions\\n     */\\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\\n    /// @param _owners List of initial owners.\\n    /// @param _required Number of required confirmations.\\n    constructor (address[] memory _owners, uint _required){\\n        for (uint i = 0; i < _owners.length; i++) {\\n            require(_owners[i] != address(0), \\\"0\\\");\\n            require(!isOwner[_owners[i]], \\\"owner ready\\\");\\n            isOwner[_owners[i]] = true;\\n        }\\n        owners = _owners;\\n        required = _required;\\n    }\\n\\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of new owner.\\n    function addOwner(address owner) public onlyWallet\\n    ownerDoesNotExist(owner) notNull(owner) validRequirement(owners.length + 1, required) {\\n        isOwner[owner] = true;\\n        owners.push(owner);\\n        emit OwnerAddition(owner);\\n    }\\n\\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner.\\n    function removeOwner(address owner) public onlyWallet ownerExists(owner) {\\n        isOwner[owner] = false;\\n        for (uint i = 0; i < owners.length; i++) {\\n            if (owners[i] == owner) {\\n                owners[i] = owners[owners.length - 1];\\n                owners.pop();\\n                break;\\n            }\\n        }\\n        if (required > owners.length)\\n            changeRequirement(owners.length);\\n        emit OwnerRemoval(owner);\\n    }\\n\\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner to be replaced.\\n    /// @param owner Address of new owner.\\n    function replaceOwner(address owner, address newOwner) public onlyWallet ownerExists(owner) ownerDoesNotExist(newOwner) {\\n        for (uint i = 0; i < owners.length; i++) {\\n            if (owners[i] == owner) {\\n                owners[i] = newOwner;\\n                break;\\n            }\\n        }\\n\\n        isOwner[owner] = false;\\n        isOwner[newOwner] = true;\\n        emit OwnerRemoval(owner);\\n        emit OwnerAddition(newOwner);\\n    }\\n\\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\\n    /// @param _required Number of required confirmations.\\n    function changeRequirement(uint _required) public onlyWallet validRequirement(owners.length, _required) {\\n        required = _required;\\n        emit RequirementChange(_required);\\n    }\\n\\n    /// @dev Allows an owner to submit and confirm a transaction.\\n    /// @param destination Transaction target address.\\n    /// @param value Transaction ether value.\\n    /// @param data Transaction data payload.\\n    /// @param description A brief description of this transaction, less than 32 bytes.\\n    /// @return transactionId transaction ID.\\n    function submitTransaction(address destination, uint value, bytes memory data, bytes32 description) public returns (uint transactionId){\\n        transactionId = addTransaction(destination, value, data, description);\\n        confirmTransaction(transactionId);\\n    }\\n\\n    /// @dev Allows an owner to confirm a transaction.\\n    /// @param transactionId Transaction ID.\\n    function confirmTransaction(uint transactionId) public ownerExists(msg.sender) transactionExists(transactionId) notDiscarded(transactionId) notConfirmed(transactionId, msg.sender) {\\n        confirmations[transactionId][msg.sender] = true;\\n        emit Confirmation(msg.sender, transactionId);\\n        // have to manually execute considerring TRON's energy problem\\n        // executeTransaction(transactionId);\\n    }\\n\\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\\n    /// @param transactionId Transaction ID.\\n    function revokeConfirmation(uint transactionId) public ownerExists(msg.sender) confirmed(transactionId, msg.sender) notExecuted(transactionId) {\\n        confirmations[transactionId][msg.sender] = false;\\n        emit Revocation(msg.sender, transactionId);\\n    }\\n\\n    /// @dev Allows anyone to execute a confirmed transaction.\\n    /// @param transactionId Transaction ID.\\n    function executeTransaction(uint transactionId) public notDiscarded(transactionId) notExecuted(transactionId) {\\n        if (isConfirmed(transactionId)) {\\n            Transaction storage transaction = transactions[transactionId];\\n            transaction.executed = true;\\n            (bool success, bytes memory returndata) = transaction.destination.call{value : transaction.value}(transaction.data);\\n            Address.verifyCallResult(success, returndata, \\\"MultiSigWallet: low-level delegate call failed\\\");\\n            // if (success) {\\n            //     emit Execution(transactionId);\\n            // } else {\\n            //     emit ExecutionFailure(transactionId);\\n            //     transaction.executed = false;\\n            // }\\n            // Address.functionCallWithValue(transaction.destination, transaction.data, transaction.value);\\n            // If function call failed, it will revert, never come here.\\n            emit Execution(transactionId);\\n        }\\n    }\\n\\n    // TODO: \\u63d0\\u6848\\u53d1\\u8d77\\u4eba\\u6709\\u6743\\u5e9f\\u5f03\\u4e00\\u4e2a\\u63d0\\u6848\\n    function discardTransaction(uint transactionId) public notExecuted(transactionId) {\\n        Transaction storage transaction = transactions[transactionId];\\n        require(msg.sender == transaction.submitter, \\\"not submitter\\\");\\n        transaction.submitter = address(0);\\n    }\\n\\n    /// @dev Returns the confirmation status of a transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return Confirmation status.\\n    function isConfirmed(uint transactionId) public view returns (bool){\\n        uint count = 0;\\n        for (uint i = 0; i < owners.length; i++) {\\n            if (confirmations[transactionId][owners[i]])\\n                count += 1;\\n            if (count == required)\\n                return true;\\n        }\\n        return false;\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\\n    /// @param destination Transaction target address.\\n    /// @param value Transaction ether value.\\n    /// @param data Transaction data payload.\\n    /// @param description A brief description of this transaction, less than 32 bytes.\\n    /// @return transactionId transaction ID.\\n    function addTransaction(address destination, uint value, bytes memory data, bytes32 description) internal notNull(destination) returns (uint transactionId){\\n        transactionId = transactionCount;\\n        transactions[transactionId] = Transaction({\\n        description : description,\\n        createTime : uint48(block.timestamp),\\n        destination : destination,\\n        value : value,\\n        data : data,\\n        submitter : msg.sender,\\n        executed : false\\n        });\\n        transactionCount += 1;\\n        emit Submission(transactionId);\\n    }\\n\\n    /*\\n     * Web3 call functions\\n     */\\n    /// @dev Returns number of confirmations of a transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return count of confirmations.\\n    function getConfirmationCount(uint transactionId)\\n    public\\n    view\\n    returns (uint count)\\n    {\\n        for (uint i = 0; i < owners.length; i++)\\n            if (confirmations[transactionId][owners[i]])\\n                count += 1;\\n    }\\n\\n    /// @dev Returns total number of transactions after filers are applied.\\n    /// @param pending Include pending transactions.\\n    /// @param executed Include executed transactions.\\n    /// @return count Total number of transactions after filters are applied.\\n    function getTransactionCount(bool pending, bool executed)\\n    public\\n    view\\n    returns (uint count)\\n    {\\n        for (uint i = 0; i < transactionCount; i++) {\\n            if (transactions[i].submitter == address(0))    // discarded\\n                continue;\\n            if (pending && !transactions[i].executed\\n            || executed && transactions[i].executed)\\n                count += 1;\\n        }\\n    }\\n\\n    /// @dev Returns list of owners.\\n    /// @return List of owner addresses.\\n    function getOwners() public view returns (address[] memory){\\n        return owners;\\n    }\\n\\n    /// @dev Returns array with owner addresses, which confirmed transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return _confirmations array of owner addresses.\\n    function getConfirmations(uint transactionId) public view returns (address[] memory _confirmations){\\n        address[] memory confirmationsTemp = new address[](owners.length);\\n        uint count = 0;\\n        uint i;\\n        for (i = 0; i < owners.length; i++)\\n            if (confirmations[transactionId][owners[i]]) {\\n                confirmationsTemp[count] = owners[i];\\n                count += 1;\\n            }\\n        _confirmations = new address[](count);\\n        for (i = 0; i < count; i++)\\n            _confirmations[i] = confirmationsTemp[i];\\n    }\\n\\n    /// @dev Returns list of transaction IDs in defined range.\\n    /// @param from Index start position of transaction array.\\n    /// @param to Index end position of transaction array.\\n    /// @param pending Include pending transactions.\\n    /// @param executed Include executed transactions.\\n    /// @return _transactionIds array of transaction IDs.\\n    function getTransactionIds(uint from, uint to, bool pending, bool executed) public view returns (uint[] memory _transactionIds){\\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\\n        uint count = 0;\\n        uint i;\\n        for (i = 0; i < transactionCount; i++) {\\n            if (transactions[i].submitter == address(0))    // discarded\\n                continue;\\n            if (pending && !transactions[i].executed\\n            || executed && transactions[i].executed)\\n            {\\n                transactionIdsTemp[count] = i;\\n                count += 1;\\n            }\\n        }\\n        _transactionIds = new uint[](to - from);\\n        for (i = from; i < to; i++)\\n            _transactionIds[i - from] = transactionIdsTemp[i];\\n    }\\n\\n    /// @notice \\u83b7\\u53d6\\u6700\\u8fd1\\u7684\\u63d0\\u6848\\n    function getTransactions(uint count, address account) public view returns (\\n        Transaction[] memory _transactions,\\n        bool[] memory _isAccountConfirms,\\n        bool[] memory _confirms,\\n        uint[] memory _ids\\n    ){\\n        if (count > transactionCount) count = transactionCount;\\n\\n        _transactions = new Transaction[](count);\\n        _isAccountConfirms = new bool[](count);\\n        _confirms = new bool[](count);\\n        _ids = new uint[](count);\\n\\n        for (uint i = 0; i < count; i++) {\\n            uint transactionId = transactionCount - 1 - i;\\n            _transactions[i] = transactions[transactionId];\\n            _isAccountConfirms[i] = confirmations[transactionId][account];\\n            _confirms[i] = isConfirmed(transactionId);\\n            _ids[i] = transactionId;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe01bf974c113859a70eebaa065d37199f51db16286ca8f49ec64729a1e3142e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620027923803806200279283398101604081905262000034916200025d565b60005b8251811015620001885760006001600160a01b031683828151811062000061576200006162000337565b60200260200101516001600160a01b031603620000a95760405162461bcd60e51b81526020600482015260016024820152600360fc1b60448201526064015b60405180910390fd5b60026000848381518110620000c257620000c262000337565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615620001265760405162461bcd60e51b815260206004820152600b60248201526a6f776e657220726561647960a81b6044820152606401620000a0565b60016002600085848151811062000141576200014162000337565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806200017f816200034d565b91505062000037565b5081516200019e906003906020850190620001a9565b506004555062000375565b82805482825590600052602060002090810192821562000201579160200282015b828111156200020157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620001ca565b506200020f92915062000213565b5090565b5b808211156200020f576000815560010162000214565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200025857600080fd5b919050565b600080604083850312156200027157600080fd5b82516001600160401b03808211156200028957600080fd5b818501915085601f8301126200029e57600080fd5b8151602082821115620002b557620002b56200022a565b8160051b604051601f19603f83011681018181108682111715620002dd57620002dd6200022a565b604052928352818301935084810182019289841115620002fc57600080fd5b948201945b838610156200032557620003158662000240565b8552948201949382019362000301565b97909101519698969750505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200036e57634e487b7160e01b600052601160045260246000fd5b5060010190565b61240d80620003856000396000f3fe6080604052600436106101445760003560e01c80639ace38c2116100b6578063ba51a6df1161006f578063ba51a6df1461043a578063c01a8c841461045a578063d74f8edd1461047a578063dc8452cd1461048f578063e20056e6146104a5578063ee22610b146104c557600080fd5b80639ace38c214610362578063a0e67e2b14610395578063a8abe69a146103b7578063b5dc40c3146103e4578063b77bf60014610404578063b9e66aa91461041a57600080fd5b806338959e201161010857806338959e20146102845780633f1f2d24146102b257806354741525146102e25780637065cb4814610302578063784547a7146103225780638b51d13f1461034257600080fd5b8063025e7c271461018c578063173825d9146101c957806320ea8d86146101e95780632f54bf6e146102095780633411c81c1461024957600080fd5b366101875734156101855760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a25b005b600080fd5b34801561019857600080fd5b506101ac6101a7366004611c61565b6104e5565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101d557600080fd5b506101856101e4366004611c96565b61050f565b3480156101f557600080fd5b50610185610204366004611c61565b6106e8565b34801561021557600080fd5b50610239610224366004611c96565b60026020526000908152604090205460ff1681565b60405190151581526020016101c0565b34801561025557600080fd5b50610239610264366004611cb1565b600160209081526000928352604080842090915290825290205460ff1681565b34801561029057600080fd5b506102a461029f366004611cf3565b6107fa565b6040519081526020016101c0565b3480156102be57600080fd5b506102d26102cd366004611cb1565b61081b565b6040516101c09493929190611e79565b3480156102ee57600080fd5b506102a46102fd366004611f99565b610b93565b34801561030e57600080fd5b5061018561031d366004611c96565b610c3e565b34801561032e57600080fd5b5061023961033d366004611c61565b610e06565b34801561034e57600080fd5b506102a461035d366004611c61565b610ea4565b34801561036e57600080fd5b5061038261037d366004611c61565b610f2a565b6040516101c09796959493929190611fc3565b3480156103a157600080fd5b506103aa611013565b6040516101c09190612019565b3480156103c357600080fd5b506103d76103d2366004612066565b611075565b6040516101c091906120ac565b3480156103f057600080fd5b506103aa6103ff366004611c61565b61123b565b34801561041057600080fd5b506102a460055481565b34801561042657600080fd5b50610185610435366004611c61565b611413565b34801561044657600080fd5b50610185610455366004611c61565b6114bd565b34801561046657600080fd5b50610185610475366004611c61565b611585565b34801561048657600080fd5b506102a4603281565b34801561049b57600080fd5b506102a460045481565b3480156104b157600080fd5b506101856104c03660046120bf565b61171f565b3480156104d157600080fd5b506101856104e0366004611c61565b61190e565b600381815481106104f557600080fd5b6000918252602090912001546001600160a01b0316905081565b3330146105375760405162461bcd60e51b815260040161052e906120e9565b60405180910390fd5b6001600160a01b038116600090815260026020526040902054819060ff166105715760405162461bcd60e51b815260040161052e9061210d565b6001600160a01b0382166000908152600260205260408120805460ff191690555b60035481101561069757826001600160a01b0316600382815481106105b9576105b9612132565b6000918252602090912001546001600160a01b03160361068557600380546105e39060019061215e565b815481106105f3576105f3612132565b600091825260209091200154600380546001600160a01b03909216918390811061061f5761061f612132565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600380548061065e5761065e612177565b600082815260209020810160001990810180546001600160a01b0319169055019055610697565b8061068f8161218d565b915050610592565b5060035460045411156106b0576003546106b0906114bd565b6040516001600160a01b038316907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a25050565b3360008181526002602052604090205460ff166107175760405162461bcd60e51b815260040161052e9061210d565b60008281526001602090815260408083203380855292529091205483919060ff166107705760405162461bcd60e51b815260206004820152600960248201526818dbdb999a5c9b595960ba1b604482015260640161052e565b6000848152602081905260409020600401548490600160a01b900460ff16156107ab5760405162461bcd60e51b815260040161052e906121a6565b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b600061080885858585611aa2565b905061081381611585565b949350505050565b6060806060806005548611156108315760055495505b8567ffffffffffffffff81111561084a5761084a611cdd565b6040519080825280602002602001820160405280156108b057816020015b6040805160e081018252600080825260208083018290529282018190526060808301829052608083015260a0820181905260c082015282526000199092019101816108685790505b5093508567ffffffffffffffff8111156108cc576108cc611cdd565b6040519080825280602002602001820160405280156108f5578160200160208202803683370190505b5092508567ffffffffffffffff81111561091157610911611cdd565b60405190808252806020026020018201604052801561093a578160200160208202803683370190505b5091508567ffffffffffffffff81111561095657610956611cdd565b60405190808252806020026020018201604052801561097f578160200160208202803683370190505b50905060005b86811015610b8957600081600160055461099f919061215e565b6109a9919061215e565b60008181526020818152604091829020825160e08101845281548152600182015465ffffffffffff811693820193909352600160301b9092046001600160a01b031692820192909252600282015460608201526003820180549394509092608084019190610a16906121cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610a42906121cb565b8015610a8f5780601f10610a6457610100808354040283529160200191610a8f565b820191906000526020600020905b815481529060010190602001808311610a7257829003601f168201915b5050509183525050600491909101546001600160a01b0381166020830152600160a01b900460ff1615156040909101528651879084908110610ad357610ad3612132565b60209081029190910181019190915260008281526001825260408082206001600160a01b038b1683529092522054855160ff90911690869084908110610b1b57610b1b612132565b91151560209283029190910190910152610b3481610e06565b848381518110610b4657610b46612132565b60200260200101901515908115158152505080838381518110610b6b57610b6b612132565b60209081029190910101525080610b818161218d565b915050610985565b5092959194509250565b6000805b600554811015610c37576000818152602081905260409020600401546001600160a01b031615610c2557838015610be75750600081815260208190526040902060040154600160a01b900460ff16155b80610c125750828015610c125750600081815260208190526040902060040154600160a01b900460ff165b15610c2557610c226001836121ff565b91505b80610c2f8161218d565b915050610b97565b5092915050565b333014610c5d5760405162461bcd60e51b815260040161052e906120e9565b6001600160a01b038116600090815260026020526040902054819060ff1615610cbc5760405162461bcd60e51b81526020600482015260116024820152701bdddb995c911bd95cd39bdd115e1a5cdd607a1b604482015260640161052e565b816001600160a01b038116610cfd5760405162461bcd60e51b81526020600482015260076024820152661b9bdd139d5b1b60ca1b604482015260640161052e565b600354610d0b9060016121ff565b60045460328211158015610d1f5750818111155b8015610d2b5750600081115b8015610d375750600082115b610d765760405162461bcd60e51b815260206004820152601060248201526f1d985b1a5914995c5d5a5c995b595b9d60821b604482015260640161052e565b6001600160a01b038516600081815260026020526040808220805460ff1916600190811790915560038054918201815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03191684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b600080805b600354811015610e9a5760008481526001602052604081206003805491929184908110610e3a57610e3a612132565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610e7557610e726001836121ff565b91505b6004548203610e88575060019392505050565b80610e928161218d565b915050610e0b565b5060009392505050565b6000805b600354811015610f245760008381526001602052604081206003805491929184908110610ed757610ed7612132565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610f1257610f0f6001836121ff565b91505b80610f1c8161218d565b915050610ea8565b50919050565b6000602081905290815260409020805460018201546002830154600384018054939465ffffffffffff841694600160301b9094046001600160a01b031693909190610f74906121cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa0906121cb565b8015610fed5780601f10610fc257610100808354040283529160200191610fed565b820191906000526020600020905b815481529060010190602001808311610fd057829003601f168201915b505050600490930154919250506001600160a01b0381169060ff600160a01b9091041687565b6060600380548060200260200160405190810160405280929190818152602001828054801561106b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161104d575b5050505050905090565b6060600060055467ffffffffffffffff81111561109457611094611cdd565b6040519080825280602002602001820160405280156110bd578160200160208202803683370190505b5090506000805b600554811015611182576000818152602081905260409020600401546001600160a01b031615611170578580156111145750600081815260208190526040902060040154600160a01b900460ff16155b8061113f575084801561113f5750600081815260208190526040902060040154600160a01b900460ff165b15611170578083838151811061115757611157612132565b602090810291909101015261116d6001836121ff565b91505b8061117a8161218d565b9150506110c4565b61118c888861215e565b67ffffffffffffffff8111156111a4576111a4611cdd565b6040519080825280602002602001820160405280156111cd578160200160208202803683370190505b5093508790505b86811015611230578281815181106111ee576111ee612132565b6020026020010151848983611203919061215e565b8151811061121357611213612132565b6020908102919091010152806112288161218d565b9150506111d4565b505050949350505050565b60035460609060009067ffffffffffffffff81111561125c5761125c611cdd565b604051908082528060200260200182016040528015611285578160200160208202803683370190505b5090506000805b60035481101561136357600085815260016020526040812060038054919291849081106112bb576112bb612132565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff161561135157600381815481106112fb576112fb612132565b9060005260206000200160009054906101000a90046001600160a01b031683838151811061132b5761132b612132565b6001600160a01b039092166020928302919091019091015261134e6001836121ff565b91505b8061135b8161218d565b91505061128c565b8167ffffffffffffffff81111561137c5761137c611cdd565b6040519080825280602002602001820160405280156113a5578160200160208202803683370190505b509350600090505b8181101561140b578281815181106113c7576113c7612132565b60200260200101518482815181106113e1576113e1612132565b6001600160a01b0390921660209283029190910190910152806114038161218d565b9150506113ad565b505050919050565b6000818152602081905260409020600401548190600160a01b900460ff161561144e5760405162461bcd60e51b815260040161052e906121a6565b600082815260208190526040902060048101546001600160a01b031633146114a85760405162461bcd60e51b815260206004820152600d60248201526c3737ba1039bab136b4ba3a32b960991b604482015260640161052e565b60040180546001600160a01b03191690555050565b3330146114dc5760405162461bcd60e51b815260040161052e906120e9565b60035481603282118015906114f15750818111155b80156114fd5750600081115b80156115095750600082115b6115485760405162461bcd60e51b815260206004820152601060248201526f1d985b1a5914995c5d5a5c995b595b9d60821b604482015260640161052e565b60048390556040518381527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9060200160405180910390a1505050565b3360008181526002602052604090205460ff166115b45760405162461bcd60e51b815260040161052e9061210d565b6000828152602081905260409020600101548290600160301b90046001600160a01b03166116185760405162461bcd60e51b81526020600482015260116024820152707472616e73616374696f6e45786973747360781b604482015260640161052e565b60008381526020819052604090206004015483906001600160a01b031661166d5760405162461bcd60e51b8152602060048201526009602482015268191a5cd8d85c99195960ba1b604482015260640161052e565b60008481526001602090815260408083203380855292529091205485919060ff16156116ca5760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd10dbdb999a5c9b595960a21b604482015260640161052e565b6000868152600160208181526040808420338086529252808420805460ff1916909317909255905188927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a3505050505050565b33301461173e5760405162461bcd60e51b815260040161052e906120e9565b6001600160a01b038216600090815260026020526040902054829060ff166117785760405162461bcd60e51b815260040161052e9061210d565b6001600160a01b038216600090815260026020526040902054829060ff16156117d75760405162461bcd60e51b81526020600482015260116024820152701bdddb995c911bd95cd39bdd115e1a5cdd607a1b604482015260640161052e565b60005b60035481101561187457846001600160a01b03166003828154811061180157611801612132565b6000918252602090912001546001600160a01b03160361186257836003828154811061182f5761182f612132565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611874565b8061186c8161218d565b9150506117da565b506001600160a01b03808516600081815260026020526040808220805460ff1990811690915593871682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a26040516001600160a01b038416907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a250505050565b60008181526020819052604090206004015481906001600160a01b03166119635760405162461bcd60e51b8152602060048201526009602482015268191a5cd8d85c99195960ba1b604482015260640161052e565b6000828152602081905260409020600401548290600160a01b900460ff161561199e5760405162461bcd60e51b815260040161052e906121a6565b6119a783610e06565b15611a9d57600083815260208190526040808220600481018054600160a01b60ff60a01b199091161790556001810154600282015492519193928392600160301b9092046001600160a01b031691611a03906003870190612212565b60006040518083038185875af1925050503d8060008114611a40576040519150601f19603f3d011682016040523d82523d6000602084013e611a45565b606091505b5091509150611a6d82826040518060600160405280602e81526020016123aa602e9139611c17565b5060405186907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a25050505b505050565b6000846001600160a01b038116611ae55760405162461bcd60e51b81526020600482015260076024820152661b9bdd139d5b1b60ca1b604482015260640161052e565b6005546040805160e08101825285815265ffffffffffff42811660208084019182526001600160a01b03808d16858701908152606086018d8152608087018d81523360a0890152600060c089018190528a815294859052979093208651815593516001850180549251909316600160301b026001600160d01b031990921695169490941793909317909255905160028201559151929450916003820190611b8c90826122d6565b5060a08201516004909101805460c0909301511515600160a01b026001600160a81b03199093166001600160a01b03909216919091179190911790556005805460019190600090611bde9084906121ff565b909155505060405182907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a250949350505050565b60608315611c26575081611c30565b611c308383611c37565b9392505050565b815115611c475781518083602001fd5b8060405162461bcd60e51b815260040161052e9190612396565b600060208284031215611c7357600080fd5b5035919050565b80356001600160a01b0381168114611c9157600080fd5b919050565b600060208284031215611ca857600080fd5b611c3082611c7a565b60008060408385031215611cc457600080fd5b82359150611cd460208401611c7a565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611d0957600080fd5b611d1285611c7a565b935060208501359250604085013567ffffffffffffffff80821115611d3657600080fd5b818701915087601f830112611d4a57600080fd5b813581811115611d5c57611d5c611cdd565b604051601f8201601f19908116603f01168101908382118183101715611d8457611d84611cdd565b816040528281528a6020848701011115611d9d57600080fd5b826020860160208301376000928101602001929092525095989497509495606001359450505050565b6000815180845260005b81811015611dec57602081850181015186830182015201611dd0565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b83811015611e3e578151151587529582019590820190600101611e20565b509495945050505050565b600081518084526020808501945080840160005b83811015611e3e57815187529582019590820190600101611e5d565b6000608080830181845280885180835260a092508286019150828160051b8701016020808c0160005b84811015611f3f57898403609f190186528151805185528381015165ffffffffffff16848601526040808201516001600160a01b0380821692880192909252606080840151908801528a83015160e08c890181905292909190611f07848a0184611dc6565b9350808c860151168c8a015250505060c0808301519250611f2b8188018415159052565b509684019694505090820190600101611ea2565b505087820390880152611f52818b611e0c565b9450505050508281036040840152611f6a8186611e0c565b90508281036060840152611f7e8185611e49565b979650505050505050565b80358015158114611c9157600080fd5b60008060408385031215611fac57600080fd5b611fb583611f89565b9150611cd460208401611f89565b87815265ffffffffffff87166020820152600060018060a01b03808816604084015286606084015260e06080840152611fff60e0840187611dc6565b941660a08301525090151560c09091015295945050505050565b6020808252825182820181905260009190848201906040850190845b8181101561205a5783516001600160a01b031683529284019291840191600101612035565b50909695505050505050565b6000806000806080858703121561207c57600080fd5b843593506020850135925061209360408601611f89565b91506120a160608601611f89565b905092959194509250565b602081526000611c306020830184611e49565b600080604083850312156120d257600080fd5b6120db83611c7a565b9150611cd460208401611c7a565b6020808252600a90820152691bdb9b1e55d85b1b195d60b21b604082015260600190565b6020808252600b908201526a6f776e657245786973747360a81b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561217157612171612148565b92915050565b634e487b7160e01b600052603160045260246000fd5b60006001820161219f5761219f612148565b5060010190565b6020808252600b908201526a1b9bdd115e1958dd5d195960aa1b604082015260600190565b600181811c908216806121df57607f821691505b602082108103610f2457634e487b7160e01b600052602260045260246000fd5b8082018082111561217157612171612148565b6000808354612220816121cb565b60018281168015612238576001811461224d5761227c565b60ff198416875282151583028701945061227c565b8760005260208060002060005b858110156122735781548a82015290840190820161225a565b50505082870194505b50929695505050505050565b601f821115611a9d57600081815260208120601f850160051c810160208610156122af5750805b601f850160051c820191505b818110156122ce578281556001016122bb565b505050505050565b815167ffffffffffffffff8111156122f0576122f0611cdd565b612304816122fe84546121cb565b84612288565b602080601f83116001811461233957600084156123215750858301515b600019600386901b1c1916600185901b1785556122ce565b600085815260208120601f198616915b8281101561236857888601518255948401946001909101908401612349565b50858210156123865787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b602081526000611c306020830184611dc656fe4d756c746953696757616c6c65743a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e040ddb0dd607f389088a4c1652c23604baa83e30b076012791b87ee84dd161964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c80639ace38c2116100b6578063ba51a6df1161006f578063ba51a6df1461043a578063c01a8c841461045a578063d74f8edd1461047a578063dc8452cd1461048f578063e20056e6146104a5578063ee22610b146104c557600080fd5b80639ace38c214610362578063a0e67e2b14610395578063a8abe69a146103b7578063b5dc40c3146103e4578063b77bf60014610404578063b9e66aa91461041a57600080fd5b806338959e201161010857806338959e20146102845780633f1f2d24146102b257806354741525146102e25780637065cb4814610302578063784547a7146103225780638b51d13f1461034257600080fd5b8063025e7c271461018c578063173825d9146101c957806320ea8d86146101e95780632f54bf6e146102095780633411c81c1461024957600080fd5b366101875734156101855760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a25b005b600080fd5b34801561019857600080fd5b506101ac6101a7366004611c61565b6104e5565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101d557600080fd5b506101856101e4366004611c96565b61050f565b3480156101f557600080fd5b50610185610204366004611c61565b6106e8565b34801561021557600080fd5b50610239610224366004611c96565b60026020526000908152604090205460ff1681565b60405190151581526020016101c0565b34801561025557600080fd5b50610239610264366004611cb1565b600160209081526000928352604080842090915290825290205460ff1681565b34801561029057600080fd5b506102a461029f366004611cf3565b6107fa565b6040519081526020016101c0565b3480156102be57600080fd5b506102d26102cd366004611cb1565b61081b565b6040516101c09493929190611e79565b3480156102ee57600080fd5b506102a46102fd366004611f99565b610b93565b34801561030e57600080fd5b5061018561031d366004611c96565b610c3e565b34801561032e57600080fd5b5061023961033d366004611c61565b610e06565b34801561034e57600080fd5b506102a461035d366004611c61565b610ea4565b34801561036e57600080fd5b5061038261037d366004611c61565b610f2a565b6040516101c09796959493929190611fc3565b3480156103a157600080fd5b506103aa611013565b6040516101c09190612019565b3480156103c357600080fd5b506103d76103d2366004612066565b611075565b6040516101c091906120ac565b3480156103f057600080fd5b506103aa6103ff366004611c61565b61123b565b34801561041057600080fd5b506102a460055481565b34801561042657600080fd5b50610185610435366004611c61565b611413565b34801561044657600080fd5b50610185610455366004611c61565b6114bd565b34801561046657600080fd5b50610185610475366004611c61565b611585565b34801561048657600080fd5b506102a4603281565b34801561049b57600080fd5b506102a460045481565b3480156104b157600080fd5b506101856104c03660046120bf565b61171f565b3480156104d157600080fd5b506101856104e0366004611c61565b61190e565b600381815481106104f557600080fd5b6000918252602090912001546001600160a01b0316905081565b3330146105375760405162461bcd60e51b815260040161052e906120e9565b60405180910390fd5b6001600160a01b038116600090815260026020526040902054819060ff166105715760405162461bcd60e51b815260040161052e9061210d565b6001600160a01b0382166000908152600260205260408120805460ff191690555b60035481101561069757826001600160a01b0316600382815481106105b9576105b9612132565b6000918252602090912001546001600160a01b03160361068557600380546105e39060019061215e565b815481106105f3576105f3612132565b600091825260209091200154600380546001600160a01b03909216918390811061061f5761061f612132565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600380548061065e5761065e612177565b600082815260209020810160001990810180546001600160a01b0319169055019055610697565b8061068f8161218d565b915050610592565b5060035460045411156106b0576003546106b0906114bd565b6040516001600160a01b038316907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a25050565b3360008181526002602052604090205460ff166107175760405162461bcd60e51b815260040161052e9061210d565b60008281526001602090815260408083203380855292529091205483919060ff166107705760405162461bcd60e51b815260206004820152600960248201526818dbdb999a5c9b595960ba1b604482015260640161052e565b6000848152602081905260409020600401548490600160a01b900460ff16156107ab5760405162461bcd60e51b815260040161052e906121a6565b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b600061080885858585611aa2565b905061081381611585565b949350505050565b6060806060806005548611156108315760055495505b8567ffffffffffffffff81111561084a5761084a611cdd565b6040519080825280602002602001820160405280156108b057816020015b6040805160e081018252600080825260208083018290529282018190526060808301829052608083015260a0820181905260c082015282526000199092019101816108685790505b5093508567ffffffffffffffff8111156108cc576108cc611cdd565b6040519080825280602002602001820160405280156108f5578160200160208202803683370190505b5092508567ffffffffffffffff81111561091157610911611cdd565b60405190808252806020026020018201604052801561093a578160200160208202803683370190505b5091508567ffffffffffffffff81111561095657610956611cdd565b60405190808252806020026020018201604052801561097f578160200160208202803683370190505b50905060005b86811015610b8957600081600160055461099f919061215e565b6109a9919061215e565b60008181526020818152604091829020825160e08101845281548152600182015465ffffffffffff811693820193909352600160301b9092046001600160a01b031692820192909252600282015460608201526003820180549394509092608084019190610a16906121cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610a42906121cb565b8015610a8f5780601f10610a6457610100808354040283529160200191610a8f565b820191906000526020600020905b815481529060010190602001808311610a7257829003601f168201915b5050509183525050600491909101546001600160a01b0381166020830152600160a01b900460ff1615156040909101528651879084908110610ad357610ad3612132565b60209081029190910181019190915260008281526001825260408082206001600160a01b038b1683529092522054855160ff90911690869084908110610b1b57610b1b612132565b91151560209283029190910190910152610b3481610e06565b848381518110610b4657610b46612132565b60200260200101901515908115158152505080838381518110610b6b57610b6b612132565b60209081029190910101525080610b818161218d565b915050610985565b5092959194509250565b6000805b600554811015610c37576000818152602081905260409020600401546001600160a01b031615610c2557838015610be75750600081815260208190526040902060040154600160a01b900460ff16155b80610c125750828015610c125750600081815260208190526040902060040154600160a01b900460ff165b15610c2557610c226001836121ff565b91505b80610c2f8161218d565b915050610b97565b5092915050565b333014610c5d5760405162461bcd60e51b815260040161052e906120e9565b6001600160a01b038116600090815260026020526040902054819060ff1615610cbc5760405162461bcd60e51b81526020600482015260116024820152701bdddb995c911bd95cd39bdd115e1a5cdd607a1b604482015260640161052e565b816001600160a01b038116610cfd5760405162461bcd60e51b81526020600482015260076024820152661b9bdd139d5b1b60ca1b604482015260640161052e565b600354610d0b9060016121ff565b60045460328211158015610d1f5750818111155b8015610d2b5750600081115b8015610d375750600082115b610d765760405162461bcd60e51b815260206004820152601060248201526f1d985b1a5914995c5d5a5c995b595b9d60821b604482015260640161052e565b6001600160a01b038516600081815260026020526040808220805460ff1916600190811790915560038054918201815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03191684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b600080805b600354811015610e9a5760008481526001602052604081206003805491929184908110610e3a57610e3a612132565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610e7557610e726001836121ff565b91505b6004548203610e88575060019392505050565b80610e928161218d565b915050610e0b565b5060009392505050565b6000805b600354811015610f245760008381526001602052604081206003805491929184908110610ed757610ed7612132565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610f1257610f0f6001836121ff565b91505b80610f1c8161218d565b915050610ea8565b50919050565b6000602081905290815260409020805460018201546002830154600384018054939465ffffffffffff841694600160301b9094046001600160a01b031693909190610f74906121cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa0906121cb565b8015610fed5780601f10610fc257610100808354040283529160200191610fed565b820191906000526020600020905b815481529060010190602001808311610fd057829003601f168201915b505050600490930154919250506001600160a01b0381169060ff600160a01b9091041687565b6060600380548060200260200160405190810160405280929190818152602001828054801561106b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161104d575b5050505050905090565b6060600060055467ffffffffffffffff81111561109457611094611cdd565b6040519080825280602002602001820160405280156110bd578160200160208202803683370190505b5090506000805b600554811015611182576000818152602081905260409020600401546001600160a01b031615611170578580156111145750600081815260208190526040902060040154600160a01b900460ff16155b8061113f575084801561113f5750600081815260208190526040902060040154600160a01b900460ff165b15611170578083838151811061115757611157612132565b602090810291909101015261116d6001836121ff565b91505b8061117a8161218d565b9150506110c4565b61118c888861215e565b67ffffffffffffffff8111156111a4576111a4611cdd565b6040519080825280602002602001820160405280156111cd578160200160208202803683370190505b5093508790505b86811015611230578281815181106111ee576111ee612132565b6020026020010151848983611203919061215e565b8151811061121357611213612132565b6020908102919091010152806112288161218d565b9150506111d4565b505050949350505050565b60035460609060009067ffffffffffffffff81111561125c5761125c611cdd565b604051908082528060200260200182016040528015611285578160200160208202803683370190505b5090506000805b60035481101561136357600085815260016020526040812060038054919291849081106112bb576112bb612132565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff161561135157600381815481106112fb576112fb612132565b9060005260206000200160009054906101000a90046001600160a01b031683838151811061132b5761132b612132565b6001600160a01b039092166020928302919091019091015261134e6001836121ff565b91505b8061135b8161218d565b91505061128c565b8167ffffffffffffffff81111561137c5761137c611cdd565b6040519080825280602002602001820160405280156113a5578160200160208202803683370190505b509350600090505b8181101561140b578281815181106113c7576113c7612132565b60200260200101518482815181106113e1576113e1612132565b6001600160a01b0390921660209283029190910190910152806114038161218d565b9150506113ad565b505050919050565b6000818152602081905260409020600401548190600160a01b900460ff161561144e5760405162461bcd60e51b815260040161052e906121a6565b600082815260208190526040902060048101546001600160a01b031633146114a85760405162461bcd60e51b815260206004820152600d60248201526c3737ba1039bab136b4ba3a32b960991b604482015260640161052e565b60040180546001600160a01b03191690555050565b3330146114dc5760405162461bcd60e51b815260040161052e906120e9565b60035481603282118015906114f15750818111155b80156114fd5750600081115b80156115095750600082115b6115485760405162461bcd60e51b815260206004820152601060248201526f1d985b1a5914995c5d5a5c995b595b9d60821b604482015260640161052e565b60048390556040518381527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9060200160405180910390a1505050565b3360008181526002602052604090205460ff166115b45760405162461bcd60e51b815260040161052e9061210d565b6000828152602081905260409020600101548290600160301b90046001600160a01b03166116185760405162461bcd60e51b81526020600482015260116024820152707472616e73616374696f6e45786973747360781b604482015260640161052e565b60008381526020819052604090206004015483906001600160a01b031661166d5760405162461bcd60e51b8152602060048201526009602482015268191a5cd8d85c99195960ba1b604482015260640161052e565b60008481526001602090815260408083203380855292529091205485919060ff16156116ca5760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd10dbdb999a5c9b595960a21b604482015260640161052e565b6000868152600160208181526040808420338086529252808420805460ff1916909317909255905188927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a3505050505050565b33301461173e5760405162461bcd60e51b815260040161052e906120e9565b6001600160a01b038216600090815260026020526040902054829060ff166117785760405162461bcd60e51b815260040161052e9061210d565b6001600160a01b038216600090815260026020526040902054829060ff16156117d75760405162461bcd60e51b81526020600482015260116024820152701bdddb995c911bd95cd39bdd115e1a5cdd607a1b604482015260640161052e565b60005b60035481101561187457846001600160a01b03166003828154811061180157611801612132565b6000918252602090912001546001600160a01b03160361186257836003828154811061182f5761182f612132565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611874565b8061186c8161218d565b9150506117da565b506001600160a01b03808516600081815260026020526040808220805460ff1990811690915593871682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a26040516001600160a01b038416907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a250505050565b60008181526020819052604090206004015481906001600160a01b03166119635760405162461bcd60e51b8152602060048201526009602482015268191a5cd8d85c99195960ba1b604482015260640161052e565b6000828152602081905260409020600401548290600160a01b900460ff161561199e5760405162461bcd60e51b815260040161052e906121a6565b6119a783610e06565b15611a9d57600083815260208190526040808220600481018054600160a01b60ff60a01b199091161790556001810154600282015492519193928392600160301b9092046001600160a01b031691611a03906003870190612212565b60006040518083038185875af1925050503d8060008114611a40576040519150601f19603f3d011682016040523d82523d6000602084013e611a45565b606091505b5091509150611a6d82826040518060600160405280602e81526020016123aa602e9139611c17565b5060405186907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a25050505b505050565b6000846001600160a01b038116611ae55760405162461bcd60e51b81526020600482015260076024820152661b9bdd139d5b1b60ca1b604482015260640161052e565b6005546040805160e08101825285815265ffffffffffff42811660208084019182526001600160a01b03808d16858701908152606086018d8152608087018d81523360a0890152600060c089018190528a815294859052979093208651815593516001850180549251909316600160301b026001600160d01b031990921695169490941793909317909255905160028201559151929450916003820190611b8c90826122d6565b5060a08201516004909101805460c0909301511515600160a01b026001600160a81b03199093166001600160a01b03909216919091179190911790556005805460019190600090611bde9084906121ff565b909155505060405182907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a250949350505050565b60608315611c26575081611c30565b611c308383611c37565b9392505050565b815115611c475781518083602001fd5b8060405162461bcd60e51b815260040161052e9190612396565b600060208284031215611c7357600080fd5b5035919050565b80356001600160a01b0381168114611c9157600080fd5b919050565b600060208284031215611ca857600080fd5b611c3082611c7a565b60008060408385031215611cc457600080fd5b82359150611cd460208401611c7a565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611d0957600080fd5b611d1285611c7a565b935060208501359250604085013567ffffffffffffffff80821115611d3657600080fd5b818701915087601f830112611d4a57600080fd5b813581811115611d5c57611d5c611cdd565b604051601f8201601f19908116603f01168101908382118183101715611d8457611d84611cdd565b816040528281528a6020848701011115611d9d57600080fd5b826020860160208301376000928101602001929092525095989497509495606001359450505050565b6000815180845260005b81811015611dec57602081850181015186830182015201611dd0565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b83811015611e3e578151151587529582019590820190600101611e20565b509495945050505050565b600081518084526020808501945080840160005b83811015611e3e57815187529582019590820190600101611e5d565b6000608080830181845280885180835260a092508286019150828160051b8701016020808c0160005b84811015611f3f57898403609f190186528151805185528381015165ffffffffffff16848601526040808201516001600160a01b0380821692880192909252606080840151908801528a83015160e08c890181905292909190611f07848a0184611dc6565b9350808c860151168c8a015250505060c0808301519250611f2b8188018415159052565b509684019694505090820190600101611ea2565b505087820390880152611f52818b611e0c565b9450505050508281036040840152611f6a8186611e0c565b90508281036060840152611f7e8185611e49565b979650505050505050565b80358015158114611c9157600080fd5b60008060408385031215611fac57600080fd5b611fb583611f89565b9150611cd460208401611f89565b87815265ffffffffffff87166020820152600060018060a01b03808816604084015286606084015260e06080840152611fff60e0840187611dc6565b941660a08301525090151560c09091015295945050505050565b6020808252825182820181905260009190848201906040850190845b8181101561205a5783516001600160a01b031683529284019291840191600101612035565b50909695505050505050565b6000806000806080858703121561207c57600080fd5b843593506020850135925061209360408601611f89565b91506120a160608601611f89565b905092959194509250565b602081526000611c306020830184611e49565b600080604083850312156120d257600080fd5b6120db83611c7a565b9150611cd460208401611c7a565b6020808252600a90820152691bdb9b1e55d85b1b195d60b21b604082015260600190565b6020808252600b908201526a6f776e657245786973747360a81b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561217157612171612148565b92915050565b634e487b7160e01b600052603160045260246000fd5b60006001820161219f5761219f612148565b5060010190565b6020808252600b908201526a1b9bdd115e1958dd5d195960aa1b604082015260600190565b600181811c908216806121df57607f821691505b602082108103610f2457634e487b7160e01b600052602260045260246000fd5b8082018082111561217157612171612148565b6000808354612220816121cb565b60018281168015612238576001811461224d5761227c565b60ff198416875282151583028701945061227c565b8760005260208060002060005b858110156122735781548a82015290840190820161225a565b50505082870194505b50929695505050505050565b601f821115611a9d57600081815260208120601f850160051c810160208610156122af5750805b601f850160051c820191505b818110156122ce578281556001016122bb565b505050505050565b815167ffffffffffffffff8111156122f0576122f0611cdd565b612304816122fe84546121cb565b84612288565b602080601f83116001811461233957600084156123215750858301515b600019600386901b1c1916600185901b1785556122ce565b600085815260208120601f198616915b8281101561236857888601518255948401946001909101908401612349565b50858210156123865787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b602081526000611c306020830184611dc656fe4d756c746953696757616c6c65743a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e040ddb0dd607f389088a4c1652c23604baa83e30b076012791b87ee84dd161964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addOwner(address)": {
        "details": "Allows to add a new owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of new owner."
        }
      },
      "changeRequirement(uint256)": {
        "details": "Allows to change the number of required confirmations. Transaction has to be sent by wallet.",
        "params": {
          "_required": "Number of required confirmations."
        }
      },
      "confirmTransaction(uint256)": {
        "details": "Allows an owner to confirm a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "constructor": {
        "details": "Contract constructor sets initial owners and required number of confirmations.",
        "params": {
          "_owners": "List of initial owners.",
          "_required": "Number of required confirmations."
        }
      },
      "executeTransaction(uint256)": {
        "details": "Allows anyone to execute a confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "getConfirmationCount(uint256)": {
        "details": "Returns number of confirmations of a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "returns": {
          "count": "of confirmations."
        }
      },
      "getConfirmations(uint256)": {
        "details": "Returns array with owner addresses, which confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "returns": {
          "_confirmations": "array of owner addresses."
        }
      },
      "getOwners()": {
        "details": "Returns list of owners.",
        "returns": {
          "_0": "List of owner addresses."
        }
      },
      "getTransactionCount(bool,bool)": {
        "details": "Returns total number of transactions after filers are applied.",
        "params": {
          "executed": "Include executed transactions.",
          "pending": "Include pending transactions."
        },
        "returns": {
          "count": "Total number of transactions after filters are applied."
        }
      },
      "getTransactionIds(uint256,uint256,bool,bool)": {
        "details": "Returns list of transaction IDs in defined range.",
        "params": {
          "executed": "Include executed transactions.",
          "from": "Index start position of transaction array.",
          "pending": "Include pending transactions.",
          "to": "Index end position of transaction array."
        },
        "returns": {
          "_transactionIds": "array of transaction IDs."
        }
      },
      "isConfirmed(uint256)": {
        "details": "Returns the confirmation status of a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "returns": {
          "_0": "Confirmation status."
        }
      },
      "removeOwner(address)": {
        "details": "Allows to remove an owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of owner."
        }
      },
      "replaceOwner(address,address)": {
        "details": "Allows to replace an owner with a new owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of new owner."
        }
      },
      "revokeConfirmation(uint256)": {
        "details": "Allows an owner to revoke a confirmation for a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "submitTransaction(address,uint256,bytes,bytes32)": {
        "details": "Allows an owner to submit and confirm a transaction.",
        "params": {
          "data": "Transaction data payload.",
          "description": "A brief description of this transaction, less than 32 bytes.",
          "destination": "Transaction target address.",
          "value": "Transaction ether value."
        },
        "returns": {
          "transactionId": "transaction ID."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTransactions(uint256,address)": {
        "notice": "获取最近的提案"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 382,
        "contract": "contracts/utils/MultiSigBank.sol:MultiSigBank",
        "label": "transactions",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Transaction)414_storage)"
      },
      {
        "astId": 388,
        "contract": "contracts/utils/MultiSigBank.sol:MultiSigBank",
        "label": "confirmations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 392,
        "contract": "contracts/utils/MultiSigBank.sol:MultiSigBank",
        "label": "isOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 395,
        "contract": "contracts/utils/MultiSigBank.sol:MultiSigBank",
        "label": "owners",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 397,
        "contract": "contracts/utils/MultiSigBank.sol:MultiSigBank",
        "label": "required",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 399,
        "contract": "contracts/utils/MultiSigBank.sol:MultiSigBank",
        "label": "transactionCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Transaction)414_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MultiSigBank.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)414_storage"
      },
      "t_struct(Transaction)414_storage": {
        "encoding": "inplace",
        "label": "struct MultiSigBank.Transaction",
        "members": [
          {
            "astId": 401,
            "contract": "contracts/utils/MultiSigBank.sol:MultiSigBank",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 403,
            "contract": "contracts/utils/MultiSigBank.sol:MultiSigBank",
            "label": "createTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 405,
            "contract": "contracts/utils/MultiSigBank.sol:MultiSigBank",
            "label": "destination",
            "offset": 6,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 407,
            "contract": "contracts/utils/MultiSigBank.sol:MultiSigBank",
            "label": "value",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 409,
            "contract": "contracts/utils/MultiSigBank.sol:MultiSigBank",
            "label": "data",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 411,
            "contract": "contracts/utils/MultiSigBank.sol:MultiSigBank",
            "label": "submitter",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 413,
            "contract": "contracts/utils/MultiSigBank.sol:MultiSigBank",
            "label": "executed",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}